spring:
  datasource:
    url: jdbc:mysql://${MYSQL_HOST:localhost}:3306/flywaydemo?allowPublicKeyRetrieval=true&useSSL=false
    password: ThePassword
    username: springuser
#    driver-class-name: "com.mysql.jdbc.Driver"
#    driver-class-name: "com.mysql.cj.jdbc.Driver"
  jpa:
#    database-platform: org.hibernate.dialect.MySQL5InnoDBDialect
    database-platform: org.hibernate.dialect.MySQLDialect
    hibernate:
#      Valid values are:
#      ddl-auto: validate | update | create | create-drop
#
#      Interpretation:
#      validate: validate the schema, makes no changes to the database.
#      update: update the schema.
#      create: creates the schema, destroying previous data.
#      create-drop: drop the schema when the SessionFactory is closed explicitly, typically when the application is stopped.
#      none: does nothing with the schema, makes no changes to the database

#     Step 1. Need this to create hibernate_sequence table, else direct validate
#             fails. Run this first and then the next one - ddl-auto: validate.
      ddl-auto: update
#
#
#     Step 2.  This causes Hibernate to validate the schema to see if it
#              matches with whatâ€™s defined in Java. If no match is found,
#              the application will not start.
#     ddl-auto: validate

  flyway:
#   put your custom table name  (default is flyway_schema_history).  In our case
#   it is schema_version
    table: schema_version
    enabled: false
    schemas: flywaydemo
    # If you want to spin up a new DB instance in another environment, Flyway can do it
    # for you in a breeze. At application startup, it tries to establish a connection to
    # the database. It will throw an error if it is not able to.
    #
    # It helps you evolve your database schema easily and is reliable in all instances.
    # There is no need to execute the database scripts manually.

    # Every time the need to upgrade the database arises, whether it is the schema
    # (DDL) or reference data (DML), you can simply create a new migration script
    # with a version number higher than the current one. When Flyway starts, it will find the new script and upgrade the database accordingly.

    # Flyway scans the file system and sorts them based on their version number.
    # Flyway creates a table name ' schema_version ' in your database.
    # This table is responsible for tracking the state of the database and keeps an
    # explicit record for the various SQL scripts that have been executed.
    # As each migration gets applied, the schema history table is updated.
    # Since we were trying to make schema changes by introducing Flyway on an already
    # existing database containing a table, it threw an application error.
    # There is no existing 'schema_version' table in the database, hence Flyway
    # was not able to track the state of the database and execute the correct
    # SQL scripts from the application repository.

    # However, if there was no existing database and we were building the schema from
    # scratch for the first time, this would not have been a problem.
    # Flyway would have successfully created the database and executed the schema changes.
    #
    # If your application is already running in production, dropping the table,
    # letting Flyway recreate the new table and the 'schema-version' table,
    # and populating the data in the existing table is not possible.

    # To intimate Flyway that it is dealing with a database with existing tables. You can do
    # that by explicitly setting the flyway baseline-on-migrate property to True
    baseline-on-migrate: false
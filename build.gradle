plugins {
	id 'org.springframework.boot' version '2.3.2.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id "org.flywaydb.flyway" version "6.5.3"
	id 'java'
	id 'idea'
	id 'eclipse'
}

group = 'com.tsys'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	compileOnly 'org.projectlombok:lombok'
	compile("org.springframework.boot:spring-boot-starter-data-jpa")
	compile('mysql:mysql-connector-java:8.0.13')
	compile('org.flywaydb:flyway-core')
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'io.projectreactor:reactor-test'
}

test {
	useJUnitPlatform()
}

flyway {
	url = 'jdbc:mysql://localhost:3306/flywaydemo?allowPublicKeyRetrieval=true&useSSL=false'
	user = 'springuser'
	password = 'ThePassword'
	schemas = ['flywaydemo']
	table = 'schema_version'
//	placeholders = [
//			'keyABC': 'valueXYZ',
//			'otherplaceholder': 'value123'
//	]
}

// To reload on changing a static file, we need a way to copy
// the changed files into the classpath of the running app.
task reload(type: Copy) {
	from 'src/main/resources'
	into 'build/resources/main'
	include 'static/**'
	include 'templates/**'
	include 'custom/**'
}

// To pass arguments while running our application using Gradle
// Plugin, we need to configure our bootRun task:
// Usage on command line:
// gradle bootRun -Dserver.port=10002 -DcustomArgument=custom
bootRun {
	systemProperties = System.properties
}
